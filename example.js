/**
 * 
 * Directory        ------------>    Context
 * File             ------------>    types.ts
 * 
 
	export interface ImusicContextType {
		playlist: object[],
		addPlaylist: (newSong: object) => void,
		playPause: (audioId: string) => void,
		changePlayPauseIcon: (audioId: string, icon: string) => void,
	};

*/






/**
 * 
 * Directory        ------------>    Context
 * File             ------------>    MusicContext.tsx
 * 
 
	import { createContext } from "react";
	import { ImusicContextType } from './types'

	export const musicContextDefaultValues: ImusicContextType = {
		playlist: [],
		addPlaylist: () => {},
		playPause: () => {},
		changePlayPauseIcon: () => {},
	};

	export const MusicContext = createContext<ImusicContextType>(
		musicContextDefaultValues
	);

*/






/**
 * 
 * Directory        ------------>    Context
 * File             ------------>    MusicProvider.tsx
 * 
	
	import { FC, useState } from "react";
	import { MusicContext, musicContextDefaultValues } from './MusicContext';
	import { ImusicContextType } from './types';



	export const MusicProvider: FC = ({ children }) => {
		const [playlist, setPlaylist]: any = useState<object[]>(musicContextDefaultValues.playlist)

		const addPlaylist = (newSong: object) => {
			return setPlaylist((playlist: any) => [...playlist, newSong]);
		}

		const playPause = (currentAudioId: string) => {
			const AudioIndex = playlist.findIndex(
				((item: any) => item.audioId === currentAudioId)
			)
			return playlist[AudioIndex].isPlaying = !playlist[AudioIndex].isPlaying
		}

		const changePlayPauseIcon = (currentAudioId: string, icon: string) => {
			const findIndex = playlist.findIndex(
				((item: any) => item.audioId === currentAudioId)
			);
			playlist[findIndex].playPauseIcon = icon;
			setPlaylist((playlist: any) => [...playlist ]);
		};

		const value: ImusicContextType = {
			playlist,
			addPlaylist,
			playPause,
			changePlayPauseIcon,
		} 
		
		return (
			<>
				<MusicContext.Provider value={value}>
					{children}
				</MusicContext.Provider>
			</>
		)
	}

*/






/**
 * 
 *  Directory        ------------>    pages
 *  File             ------------>    _app.tsx
 *

	import type { AppProps } from 'next/app'
	import { MusicProvider } from '../Context/MusicProvider'

	function MyApp({ Component, pageProps}: AppProps) {
		return (
			<>
				<MusicProvider>
					<Component {...pageProps} />
				</MusicProvider>
			</>
		)
	}

	export default MyApp

*/






/**
 * 
 *  Directory        ------------>    pages
 *  File             ------------>    index.tsx
 * 

	import Head from 'next/head';
	import { FC } from 'react';
	import Home from '../Components/Home';

	const Index: FC = () => {
		return (
			<>
				<Head>
					<title>Legacy song</title>
					<meta name="description" content="Generated by create next app" />
					<link rel="icon" href="/favicon.ico" />
				</Head>
				<Home />
			</>
		)
	}

	export default Index;

*/






/**
 * Directory        ------------>    Components
 * File             ------------>    Home.tsx
 * 

	import { PlayMusic } from "./PlayMusic";
	import { SelectMusic } from "./SelectMusic";
	import styles from '../styles/Home.module.css';
	import Heading from './Heading';
	
	const Home = () => {
		return (
			<main className={styles.main}>
				<Heading />
				<SelectMusic />
				<PlayMusic />
			</main>
		)
	}
	
	export default Home;

*/






/**
 * Directory        ------------>    Components
 * File             ------------>    Heading.tsx
 * 

	import styles from '../styles/Home.module.css';

	const Heading = () => {
		return (
			<h1 className={styles.headerTitle}>Music Studio</h1>
		);
	};

	export default Heading;

*/






// ======================================================================
//                      COME ON ERIC DO NOT BORE THE AUDIENCE
// ======================================================================






/**
 * Directory        ------------>    Components
 * File             ------------>    SelectMusic.tsx
 * 
 
	import React, { useState, useContext } from 'react';
	import { v4 as uuidv4 } from 'uuid';
	import Image from 'next/image';
	import { MusicContext } from '../Context/MusicContext'
	import { toBase64 } from '../utils/convert'
	import man_With_heaphones_img from '../public/images/man_in_heaphones.png';
	import playIcon from '../public/images/play_icon.svg';
	import styles from '../styles/Home.module.css'

	export const SelectMusic = () => {
		const [defaultColor, setDefaultColor] = useState<Object>({opacity: 1, border: "none"});
		const { addPlaylist } = useContext(MusicContext);
		
		const handleChange = async (e: React.ChangeEvent<HTMLInputElement>) => {
			const selectedFile = e.target.files || [] ;
			for (var i = 0; i < selectedFile.length; i ++ ) {
				const type: string = selectedFile[i].type
				if (type === "audio/mpeg") {
					const base64Format: any = await toBase64(selectedFile[i])
					addPlaylist({
						audioId: uuidv4(),
						audioFile: selectedFile[i],
						isPlaying: false,
						audioInstance: new Audio(base64Format),
						playPauseIcon: playIcon,
						randomColor: Math.random().toString(16).substring(3, 9),
					})
				}
				else {
					return alert("File not supported")
				}
			}
		}

		const handleDrop = async (e: React.DragEvent<HTMLElement>) => {
			e.preventDefault();
			setDefaultColor({opacity: 1, border: "none"})
			const dragedItems: any = e.dataTransfer.items
			const dragedFiles = e.dataTransfer.files
		
			if (dragedItems) {
				// Use DataTransferItemList interface to access the file(s)
				for (let i = 0; i < dragedItems.length; i++) {
					// If dropped items aren't files, reject them
					const kind = dragedItems[i].kind
					const type = dragedItems[i].type
					if (type === "audio/mpeg") {
						toBase64(dragedItems[i].getAsFile())
							.then((res: any) => {
								addPlaylist({
									audioId: uuidv4(),
									audioFile: dragedItems[i] ? dragedItems[i].getAsFile() : dragedFiles[i],
									isPlaying: false,
									audioInstance: new Audio(res),
									playPauseIcon: playIcon,
									randomColor: Math.random().toString(16).substring(3, 9),
								})
							})
					} else {
						return alert("File not supported")
					}
				}
			} else {
				// Use DataTransfer interface to access the file(s)
				for (let i = 0; i < dragedFiles.length; i ++ ) {
					const type: string = dragedFiles[i].type
					if (type === "audio/mpeg") {
						console.log(2, i);
						const base64Format: any = await toBase64(dragedFiles[i])
						addPlaylist({
							audioId: uuidv4(),
							audioFile: dragedFiles[i],
							isPlaying: false,
							audioInstance: new Audio(base64Format)
						})
					} else {
						return alert("File not supported")
					}
				}
			}
		}

		const handleDragOver = (e: React.DragEvent<HTMLElement>) => {
			e.preventDefault();
			setDefaultColor({opacity: 0.7, border: "1px dotted yellow"})
		}

		return (
			<section className={styles.heading}
				onDragOver={handleDragOver}
				onDrop={handleDrop}
				style={defaultColor}
			>
				<div className={styles.details}>
					<div className={styles.title}>
						<h1>Upload &amp; Share</h1>
					</div>
					<form className={styles.musicForm}>
						<label htmlFor="fileElem">Upload now</label>
						<span>or drop a file</span>
						<input
							type="file"
							id="fileElem"
							multiple
							accept="audio/mp3"
							onChange={handleChange}
						/>
					</form>
				</div>
				<div className={styles.entertainImage}>
					<Image
						src={man_With_heaphones_img.src}
						alt="New DJ"
						width={250}
						height={250}
						/>
				</div>
		</section>
		);
	};

*/






// ======================================================================
//                      COME ON ERIC DO NOT BORE THE AUDIENCE
// ======================================================================






/**
 * Directory        ------------>    Components
 * File             ------------>    PlayMusic.tsx
 * 

	import Image from 'next/image';
	import moment from 'moment';
	import { FC, useContext } from 'react';
	import { MusicContext } from '../Context/MusicContext';
	import emptyIcon from '../public/images/music-note.svg';
	import playIcon from '../public/images/play_icon.svg';
	import pauseIcon from '../public/images/pause_icon.svg';
	import styles from '../styles/Home.module.css'

	interface ItemType {
		audioFile: File;
		audioId: any;
		audioInstance: {
			pause: Function,
			play: Function
		};
		isPlaying: Boolean;
	}

	const EmptyPlaylist: FC = () => {
		return (
			<div className={styles.emptyList}>
				<img src={emptyIcon.src} alt="Empty music" />
				<p>No Playlist available</p>
				<div style={{display: "none"}}>Icons made by <a href="https://www.freepik.com" title="Freepik">Freepik</a> from <a href="https://www.flaticon.com/" title="Flaticon">www.flaticon.com</a></div>
			</div>
		)
	}

	const AllPlaylist: FC = () => {
		const { playlist, playPause, changePlayPauseIcon } = useContext(MusicContext);
		const fileSize = (sizeInBytes:number) => (sizeInBytes / (1024*1024)).toFixed(2);
		const fileTimeStamp = (lastModified: string) => (moment(lastModified).fromNow(true));
		console.log(playlist);
		

		const handlePlayPause = (item: ItemType) => {
			if (item.isPlaying) {
				item.audioInstance.pause();
				changePlayPauseIcon(item.audioId, playIcon);
			} else {
				item.audioInstance.play();
				changePlayPauseIcon(item.audioId, pauseIcon);
			}
			playPause(item.audioId)
		}
		
		return (
			<>
				<p className={styles.playlistTitle}>My Playlist</p>
				<div className={styles.category}>
					<section className={styles.dragList}> 
						{
							playlist.map((item: any) => (
								<div className={styles.playlist} key={item.audioId} style={{ border: `1px solid #${item.randomColor}` }}>
									<div className={styles.songColor} style={{ backgroundColor: `#${item.randomColor}` }}>
										<span>{item.audioFile.name[0].toUpperCase()}</span>
									</div>
									<div className={styles.songDetails}>
										<span>{item.audioFile.name}</span>
										<span>{fileTimeStamp(item.audioFile.lastModified)} Ago</span>
										<span>{fileSize(item.audioFile.size)} MB</span>
									</div>
									<div className={styles.playPause}>
										<button onClick={() => handlePlayPause(item)}>
											<Image
												src={item.playPauseIcon}
												alt="Play pause icon"
												width="20px"
												height="20px"
											/>
										</button>
									</div>
								</div>
								)
							)
						}
				</section>
				</div>
			</>
		);
	};

	export const PlayMusic: FC = () => {
		const { playlist } = useContext(MusicContext);
		return (
			<>      
				{
					playlist.length === 0 ? <EmptyPlaylist /> : <AllPlaylist />
				}
			</>
		)
	}

*/